generate-ssh-config() { docker ps --format json | jq --arg PUBLIC_IP $(dig +short myip.opendns.com @resolver1.opendns.com -4) -rsc '.[] | { Names: ["Host " + .Names + "\n"], Image: [if .Image|contains("vr-sros") then ("    HostName " + $PUBLIC_IP + "\n" + "    User admin\n    UserKnownHostsFile /dev/null\n    StrictHostKeyChecking no\n") elif .Image|contains("network-multitool") then ("    HostName " + $PUBLIC_IP + "\n" + "    User user\n    UserKnownHostsFile /dev/null\n    StrictHostKeyChecking no\n")  elif .Image|contains("akpinar/alpine") then ("    HostName " + $PUBLIC_IP + "\n" + "    User admin\n    UserKnownHostsFile /dev/null\n    StrictHostKeyChecking no\n") elif .Image|contains("srl-labs/alpine") then ("    HostName " + $PUBLIC_IP + "\n" + "    User admin\n    UserKnownHostsFile /dev/null\n    StrictHostKeyChecking no\n") elif .Image|contains("srlinux") then ("    HostName " + $PUBLIC_IP + "\n" + "    User admin\n    UserKnownHostsFile /dev/null\n    StrictHostKeyChecking no\n") else "    error\n" end], Ports: [ "    Port " + (.Ports | scan("0.0.0.0:[0-9]*->22") | scan("[0-9]*->22"))[0:5] ] } ' | jq -rsc 'del ( .[] | select (.Image | contains(["error"])) , select( .Ports | length == 0 ) )' | jq -rc '.[]' | sed 's/{"Names":\["//g'  | sed 's/"],"Image":\["//g' | sed 's/"],"Ports":\["//g' | sed 's/"]}//g' | sed 's/\\n /'\\\n'/g'; }
